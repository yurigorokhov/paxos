// Code generated by protoc-gen-go.
// source: paxos_routes.proto
// DO NOT EDIT!

/*
Package paxosrpc is a generated protocol buffer package.

It is generated from these files:
	paxos_routes.proto

It has these top-level messages:
	ProposeRequest
	ProposeReply
	AcceptRequest
	AcceptReply
	CommitRequest
	CommitReply
*/
package paxosrpc

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ProposeRequest struct {
	ProposalNumber uint64 `protobuf:"varint,1,opt" json:"ProposalNumber,omitempty"`
}

func (m *ProposeRequest) Reset()         { *m = ProposeRequest{} }
func (m *ProposeRequest) String() string { return proto.CompactTextString(m) }
func (*ProposeRequest) ProtoMessage()    {}

type ProposeReply struct {
	HighestProposalNumber            uint64 `protobuf:"varint,1,opt" json:"HighestProposalNumber,omitempty"`
	Success                          bool   `protobuf:"varint,2,opt" json:"Success,omitempty"`
	PreviouslyAcceptedProposalNumber uint64 `protobuf:"varint,3,opt" json:"PreviouslyAcceptedProposalNumber,omitempty"`
	PreviouslyAcceptedValue          uint64 `protobuf:"varint,4,opt" json:"PreviouslyAcceptedValue,omitempty"`
	MissingValue                     uint64 `protobuf:"varint,5,opt" json:"MissingValue,omitempty"`
}

func (m *ProposeReply) Reset()         { *m = ProposeReply{} }
func (m *ProposeReply) String() string { return proto.CompactTextString(m) }
func (*ProposeReply) ProtoMessage()    {}

type AcceptRequest struct {
	ProposalNumber uint64 `protobuf:"varint,1,opt" json:"ProposalNumber,omitempty"`
	ProposalValue  uint64 `protobuf:"varint,2,opt" json:"ProposalValue,omitempty"`
}

func (m *AcceptRequest) Reset()         { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()    {}

type AcceptReply struct {
	Success                  bool   `protobuf:"varint,1,opt" json:"Success,omitempty"`
	PreviouslyAcceptedNumber uint64 `protobuf:"varint,2,opt" json:"PreviouslyAcceptedNumber,omitempty"`
}

func (m *AcceptReply) Reset()         { *m = AcceptReply{} }
func (m *AcceptReply) String() string { return proto.CompactTextString(m) }
func (*AcceptReply) ProtoMessage()    {}

type CommitRequest struct {
	ProposalNumber uint64 `protobuf:"varint,1,opt" json:"ProposalNumber,omitempty"`
	ProposalValue  uint64 `protobuf:"varint,2,opt" json:"ProposalValue,omitempty"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}

type CommitReply struct {
	Success bool `protobuf:"varint,1,opt" json:"Success,omitempty"`
}

func (m *CommitReply) Reset()         { *m = CommitReply{} }
func (m *CommitReply) String() string { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()    {}

func init() {
}

// Client API for PaxosRoutes service

type PaxosRoutesClient interface {
	ProposeValue(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error)
	AcceptValue(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
}

type paxosRoutesClient struct {
	cc *grpc.ClientConn
}

func NewPaxosRoutesClient(cc *grpc.ClientConn) PaxosRoutesClient {
	return &paxosRoutesClient{cc}
}

func (c *paxosRoutesClient) ProposeValue(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error) {
	out := new(ProposeReply)
	err := grpc.Invoke(ctx, "/paxosrpc.PaxosRoutes/ProposeValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosRoutesClient) AcceptValue(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error) {
	out := new(AcceptReply)
	err := grpc.Invoke(ctx, "/paxosrpc.PaxosRoutes/AcceptValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosRoutesClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := grpc.Invoke(ctx, "/paxosrpc.PaxosRoutes/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaxosRoutes service

type PaxosRoutesServer interface {
	ProposeValue(context.Context, *ProposeRequest) (*ProposeReply, error)
	AcceptValue(context.Context, *AcceptRequest) (*AcceptReply, error)
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
}

func RegisterPaxosRoutesServer(s *grpc.Server, srv PaxosRoutesServer) {
	s.RegisterService(&_PaxosRoutes_serviceDesc, srv)
}

func _PaxosRoutes_ProposeValue_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ProposeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosRoutesServer).ProposeValue(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PaxosRoutes_AcceptValue_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(AcceptRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosRoutesServer).AcceptValue(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PaxosRoutes_Commit_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CommitRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PaxosRoutesServer).Commit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PaxosRoutes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paxosrpc.PaxosRoutes",
	HandlerType: (*PaxosRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeValue",
			Handler:    _PaxosRoutes_ProposeValue_Handler,
		},
		{
			MethodName: "AcceptValue",
			Handler:    _PaxosRoutes_AcceptValue_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PaxosRoutes_Commit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
